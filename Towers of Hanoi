#include <iostream>
#include <vector>
using namespace std;

int main() {
   vector<int> tower[3];
   int n;
   cout << "Please enter the # of rings to move on a tower: ";
   cin >> n;
   cout << endl;
   // close is the number of spots to move to the right to find the "closest" tower.
   // If n is odd, close = 1 and far = 2.  If n is even, the reverse.
   int closestTower = (n % 2 == 0 ? 2 : 1), farthestTower = (n % 2 == 0 ? 1 : 2); // conditional ternary op --> (condition ? result 1(if true) : result 2(if false))     
   int from = 0, to = closestTower, candidate = 1, step = 0;
   
   //time for tower code
   for(int i = n + 1; i >= 1; --i)
      tower[0].push_back(i);
   tower[1].push_back(n+1);
   tower[2].push_back(n+1);
   
   while (tower[1].size() < n+1) { // when it doesnt contain all the rings
      cout << "Step #" << ++step << ": Please move ring " << candidate << " from tower " << char(from+'A') << " to tower " << char(to+'A') << endl;
      
      tower[to].push_back(tower[from].back()); // move "from" tower to the "to" tower.
      tower[from].pop_back();
      
      if (tower[(to+1) % 3].back() < tower[(to+2) % 3].back()) // find new "from" tower 
         from = (to+1) % 3;
      else
         from = (to+2) % 3;
      candidate = tower[from].back();                      
         
      if (tower[(from+closestTower) % 3].back() > candidate) // find new "to" tower.
         to = (from+closestTower) % 3;                   // closest tower the rings are placed
      else
         to = (from+farthestTower) % 3;
   }
   return 0;
}
